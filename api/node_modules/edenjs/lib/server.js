module.exports = function($) {
	return this.define(function(public) {
		/* Public Properties
		-------------------------------*/
		public.host		= '127.0.0.1';
		public.port		= 1337;
		
		public.resource = null;
		
		/* Private Properties
		-------------------------------*/
		var _events 	= new (require('events').EventEmitter);
		
		/* Loader
		-------------------------------*/
		public.__load = function() {
			return new this();
		};
		
		/* Construct
		-------------------------------*/
		/* Public Methods
		-------------------------------*/
		/**
		 * Connect to server
		 *
		 * @return this
		 */
		public.connect = function() {
			this.resource = require('http')
				.createServer($.alter(_response, this))
				.listen(this.port, this.host);
				
			console.log('Eden running on http://'+this.host+':'+this.port+'/');
			return this;
		};
		
		/**
		 * Global event listener for the server
		 *
		 * @return this
		 */
		public.listen = function(event, callback) {
			_events.on(event, callback);
			return this;
		};
		
		/**
		 * Sets the identifiable host name
		 *
		 * @param string
		 * @return this
		 */
		public.setHost = function(host) {
			this.host = host;
			return this;
		};
		
		/**
		 * Sets the identifiable port
		 *
		 * @param string
		 * @return this
		 */
		public.setPort = function(port) {
			this.port = port;
			return this;
		};
		
		/**
		 * Global event trigger for the server
		 *
		 * @return this
		 */
		public.trigger = function() {
			_events.emit.apply(_events, arguments);
			return this;
		};
	
		/* Private Methods
		-------------------------------*/
		var _response = function(request, response) {
			//start in good conscience
			response.state 		= 200;
			response.headers 	= { 'Content-Type': 'text/html' };
			
			//parse out the URL
			request.path 		= $.load('string', request.url).toPath().get();
			request.pathArray	= $.load('string', request.url).pathToArray().get();
			request.query 		= $.load('string', request.url).pathToQuery().get();
			
			request.message 		= '';
			
			request.on('data', function(data) {
				request.message += data;
				
				//Prevent FLOOD ATTACK, FAULTY CLIENT, NUKE REQUEST
				if(request.message.length > 1e6) {
					request.message = '';
					response.writeHead(413, {'Content-Type': 'text/plain'}).end();
					request.connection.destroy();
				}
			});
			
			request.on('end', $.alter(function() {
				//wait for the response to be ready
				this.listen('response', $.alter(function(request, response) {
					try {
						response.writeHead(response.state, response.headers);
						response.end(response.message+'');
						
						//event trigger
						this.trigger('output', request, response);
					} catch(error) {
						response.state = 500;
						//event trigger
						this.trigger('output-error', request, response, error);
						
						if(!response.message) {
							response.message = error.toString();
						}
						
						response.writeHead(response.state, response.headers);
						response.end(response.message);
					}
				}, this));
				
				//request trigger
				this.trigger('request', request, response);
				
				//if response isn't processing
				if(!response.processing) {
					response.state = 404;
					this.trigger('response', request, response);
				}
				
			}, this));
		};
	});
};